using HotChocolate.Types;
using Npc.Api.Entities;
using Npc.Api.Data;
using Microsoft.EntityFrameworkCore;

namespace Npc.Api.GraphQL.Types
{
    public class LoreType : ObjectType<Lore>
    {
        protected override void Configure(IObjectTypeDescriptor<Lore> descriptor)
        {
            descriptor
                .Description("Represents a piece of lore or worldbuilding content.");

            descriptor
                .Field(l => l.Id)
                .Description("The unique identifier for the lore entry.");

            descriptor
                .Field(l => l.Title)
                .Description("The title of the lore entry.");

            descriptor
                .Field(l => l.Text)
                .Description("The full text content of the lore entry.");

            descriptor
                .Field(l => l.IsGenerated)
                .Description("Indicates if this lore was generated by AI.");

            descriptor
                .Field(l => l.GenerationSource)
                .Description("The source that generated this lore (e.g., 'agent').");

            descriptor
                .Field(l => l.GenerationMeta)
                .Description("Metadata about the generation process (JSON format).");

            descriptor
                .Field(l => l.GeneratedAt)
                .Description("When this lore was generated (if applicable).");

            descriptor
                .Field(l => l.CreatedAt)
                .Description("When the lore entry was created.");

            descriptor
                .Field(l => l.UpdatedAt)
                .Description("When the lore entry was last updated.");

            // Navigation properties
            descriptor
                .Field(l => l.World)
                .Description("The world this lore belongs to.")
                .ResolveWith<LoreResolvers>(r => r.GetWorldAsync(default!, default!, default))
                .UseDbContext<CharacterDbContext>();

            // Computed fields
            descriptor
                .Field("wordCount")
                .Type<IntType>()
                .Description("Number of words in the lore text.")
                .ResolveWith<LoreResolvers>(r => r.GetWordCount(default!));

            descriptor
                .Field("readingTimeMinutes")
                .Type<IntType>()
                .Description("Estimated reading time in minutes (assuming 200 WPM).")
                .ResolveWith<LoreResolvers>(r => r.GetReadingTimeMinutes(default!));
        }

        private class LoreResolvers
        {
            public async Task<World?> GetWorldAsync(
                [Parent] Lore lore,
                [ScopedService] CharacterDbContext context,
                CancellationToken cancellationToken)
            {
                if (lore.WorldId == null) return null;

                return await context.Worlds
                    .FirstOrDefaultAsync(w => w.Id == lore.WorldId, cancellationToken);
            }

            public int GetWordCount([Parent] Lore lore)
            {
                if (string.IsNullOrWhiteSpace(lore.Text))
                    return 0;

                return lore.Text
                    .Split(' ', StringSplitOptions.RemoveEmptyEntries)
                    .Length;
            }

            public int GetReadingTimeMinutes([Parent] Lore lore)
            {
                var wordCount = GetWordCount(lore);
                return Math.Max(1, (int)Math.Ceiling(wordCount / 200.0)); // 200 words per minute
            }
        }
    }
}